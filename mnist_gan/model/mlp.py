import torchimport torch.nn as nnimport torch.nn.functional as F# model ---------------------------------------------------------class Generator(nn.Module):    def __init__(self):        super(Generator, self).__init__()        self.fc1 = nn.Linear(1, 10)        self.fc2 = nn.Linear(10, 100)        self.fc3 = nn.Linear(100, 784)    def forward(self, x):        x = F.leaky_relu(self.fc1(x))        x = F.leaky_relu(self.fc2(x))        x = F.tanh(self.fc3(x))        return xclass Discriminator(nn.Module):    def __init__(self):        super(Discriminator, self).__init__()        self.fc1 = nn.Linear(784, 100)        self.fc1_bn = nn.BatchNorm1d(100)        self.fc2 = nn.Linear(100, 10)        self.fc2_bn = nn.BatchNorm1d(10)        self.fc3 = nn.Linear(10, 1)    def forward(self, x):        x = x.view(-1, 784)        x = x.data        x = F.leaky_relu(self.fc1(x))        x = F.leaky_relu(self.fc2(x))        x = F.sigmoid(self.fc3(x))        return x