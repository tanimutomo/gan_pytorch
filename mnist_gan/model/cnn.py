import torchimport torch.nn as nnimport torch.nn.functional as F# model ---------------------------------------------------------class Generator_CNN(nn.Module):    def __init__(self, c=128):        super(Generator_CNN, self).__init__()        main = nn.Sequential(                nn.ConvTranspose2d(100, c*8, 2, 1, 0),                nn.BatchNorm2d(c*8),                nn.ReLU(True),                nn.ConvTranspose2d(c*8, c*4, 4, 2, 1),                nn.BatchNorm2d(c*4),                nn.ReLU(True),                nn.ConvTranspose2d(c*4, c*2, 3, 2, 1),                nn.BatchNorm2d(c*2),                nn.ReLU(True),                nn.ConvTranspose2d(c*2, c, 4, 2, 1),                nn.BatchNorm2d(c),                nn.ReLU(True),                nn.ConvTranspose2d(c, 1, 4, 2, 1),                nn.Tanh(),                )        self.main = main    def forward(self, input):        out = self.main(input)        return outclass Discriminator_CNN(nn.Module):    def __init__(self, c=128):        super(Discriminator_CNN, self).__init__()        self.model = nn.Sequential(            nn.Conv2d(1, c, 4, 2, 1),            nn.BatchNorm2d(c),            nn.LeakyReLU(True),            nn.Conv2d(c, c*2, 4, 2, 1),            nn.BatchNorm2d(c*2),            nn.LeakyReLU(True),            nn.Conv2d(c*2, c*4, 3, 2, 1),            nn.BatchNorm2d(c*4),            nn.LeakyReLU(True),            nn.Conv2d(c*4, c*8, 4, 2, 1),            nn.BatchNorm2d(c*8),            nn.LeakyReLU(True),            nn.Conv2d(c*8, 1, 2, 1, 0),        )    def forward(self, input, use_sig=True):        out = self.model(input)        if use_sig:            out = F.sigmoid(out)                return out