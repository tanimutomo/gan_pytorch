# Wasserstein_distanceimport torch# cuda ---------------------------------------------------------device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')# loss ---------------------------------------------------------def loss_wG(output_f, batch_size):    loss = torch.sum(output_f)    loss = - loss / batch_size    return lossdef loss_wD(output_r, output_f, batch_size):    real_loss = torch.sum(output_r) / batch_size    fake_loss = torch.sum(output_f) / batch_size    loss = real_loss - fake_loss    return loss